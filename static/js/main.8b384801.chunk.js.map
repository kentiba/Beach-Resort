{"version":3,"sources":["components/Navbar/Navbar.component.jsx","App.js","serviceWorker.js","index.js","Contentful/Contentful.js","Context/Context.js","components/withSpinner/withSpinner.component.jsx","images/logo.svg"],"names":["Navbar","useState","isOpen","setIsOpen","handleToggle","className","to","src","Logo","alt","type","onClick","HomePage","lazy","RoomsPage","SingleRoom","NotFoundPage","App","Fragment","fallback","exact","path","component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","createClient","space","accessToken","RoomContext","createContext","RoomProvider","rooms","sortedRooms","featuredRooms","loading","capacity","price","minPrice","maxPrice","minSize","maxSize","breakfast","pets","getData","a","Client","getEntries","content_type","order","res","formatData","items","filter","room","featured","Math","max","map","item","size","setState","id","sys","images","fields","image","file","url","getRoom","slug","find","handleChange","e","target","value","checked","name","filterRooms","tempRooms","parseInt","this","Provider","props","children","Component","withSpinner","module","exports"],"mappings":"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","file":"static/js/main.8b384801.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport { FaAlignRight } from \"react-icons/fa\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Logo from \"../../images/logo.svg\";\r\nimport \"./Navbar.styles.css\";\r\n\r\nconst Navbar = () => {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const handleToggle = () => setIsOpen(!isOpen);\r\n\r\n  return (\r\n    <nav className=\"navbar\">\r\n      <div className=\"nav-center\">\r\n        <div className=\"nav-header\">\r\n          <Link to=\"/\">\r\n            <img className=\"image\" src={Logo} alt=\"Beach Resort\" />\r\n          </Link>\r\n          <button type=\"button\" className=\"nav-btn\" onClick={handleToggle}>\r\n            <FaAlignRight className=\"nav-icon\" />\r\n          </button>\r\n        </div>\r\n        <ul\r\n          className={\r\n            isOpen ? \"nav-links show-nav link-text\" : \"nav-links link-text\"\r\n          }\r\n        >\r\n          <li onClick={handleToggle}>\r\n            <Link to=\"/\">Home</Link>\r\n          </li>\r\n          <li onClick={handleToggle}>\r\n            <Link to=\"/rooms\">Rooms</Link>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n      <div className=\"curved-shape\"></div>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default Navbar;\r\n","import React, { lazy, Suspense } from \"react\";\nimport { Switch, Route } from \"react-router-dom\";\nimport WithSpinner from \"./components/withSpinner/withSpinner.component\";\nimport \"./App.css\";\nimport Navbar from \"./components/Navbar/Navbar.component\";\nconst HomePage = lazy(() => import(\"./pages/Home.component\"));\nconst RoomsPage = lazy(() => import(\"./pages/Rooms.component\"));\nconst SingleRoom = lazy(() => import(\"./pages/SingleRoom.component\"));\nconst NotFoundPage = lazy(() => import(\"./pages/Not-found.component\"));\n\nfunction App() {\n  return (\n    <React.Fragment>\n      <Suspense fallback={<WithSpinner />}>\n        <Navbar />\n        <Switch>\n          <Route exact path=\"/\" component={HomePage} />\n          <Route exact path=\"/rooms\" component={RoomsPage} />\n          <Route exact path=\"/rooms/:slug\" component={SingleRoom} />\n          <Route path=\"*\" component={NotFoundPage} />\n        </Switch>\n      </Suspense>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport App from \"./App\";\nimport RoomProvider from \"./Context/Context\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <RoomProvider>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </RoomProvider>,\n\n  document.getElementById(\"root\")\n);\n\nserviceWorker.register();\n","import { createClient } from \"contentful\";\r\n\r\nexport default createClient({\r\n  // This is the space ID. A space is like a project folder in Contentful terms\r\n  space: process.env.REACT_APP_API_SPACE,\r\n  // This is the access token for this space. Normally you get both ID and the token in the Contentful web app\r\n  accessToken: process.env.REACT_APP_API_ACCESS_TOKEN\r\n});\r\n","import React, { Component, createContext } from \"react\";\r\nimport Client from \"../Contentful/Contentful\";\r\n\r\nexport const RoomContext = createContext();\r\n\r\nclass RoomProvider extends Component {\r\n  state = {\r\n    rooms: [],\r\n    sortedRooms: [],\r\n    featuredRooms: [],\r\n    loading: true,\r\n    type: \"all\",\r\n    capacity: 1,\r\n    price: 0,\r\n    minPrice: 0,\r\n    maxPrice: 0,\r\n    minSize: 0,\r\n    maxSize: 0,\r\n    breakfast: false,\r\n    pets: false\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.getData();\r\n  }\r\n\r\n  //  get data\r\n  getData = async () => {\r\n    try {\r\n      let res = await Client.getEntries({\r\n        content_type: \"beachResortRooms\",\r\n        order: \"sys.createdAt\"\r\n      });\r\n      let rooms = this.formatData(res.items);\r\n      let featuredRooms = rooms.filter(room => room.featured);\r\n      let maxPrice = Math.max(...rooms.map(item => item.price));\r\n      let maxSize = Math.max(...rooms.map(item => item.size));\r\n      this.setState({\r\n        rooms,\r\n        featuredRooms,\r\n        sortedRooms: rooms,\r\n        loading: false,\r\n        price: maxPrice,\r\n        maxPrice,\r\n        maxSize\r\n      });\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  };\r\n\r\n  formatData = items => {\r\n    let tempItems = items.map(item => {\r\n      let id = item.sys.id;\r\n      let images = item.fields.images.map(image => image.fields.file.url);\r\n      // we are overriding images and id fields to make it easy to fetch them\r\n      let room = { ...item.fields, images, id };\r\n      return room;\r\n    });\r\n    return tempItems;\r\n  };\r\n\r\n  getRoom = slug => {\r\n    let room = this.state.rooms.find(room => {\r\n      return room.slug === slug;\r\n    });\r\n    return room;\r\n  };\r\n\r\n  handleChange = e => {\r\n    const { target } = e;\r\n    const value = target.type === \"checkbox\" ? target.checked : target.value;\r\n    const name = e.target.name;\r\n    this.setState(\r\n      {\r\n        [name]: value\r\n      },\r\n      () => this.filterRooms()\r\n    );\r\n  };\r\n\r\n  filterRooms = () => {\r\n    let {\r\n      rooms,\r\n      type,\r\n      capacity,\r\n      price,\r\n      minSize,\r\n      maxSize,\r\n      breakfast,\r\n      pets\r\n    } = this.state;\r\n    //temp rooms for filtering\r\n    let tempRooms = [...rooms];\r\n\r\n    //transform values\r\n    capacity = parseInt(capacity);\r\n    price = parseInt(price);\r\n    minSize = parseInt(minSize);\r\n    maxSize = parseInt(maxSize);\r\n\r\n    //types\r\n    if (type !== \"all\")\r\n      tempRooms = tempRooms.filter(room => room.type === type);\r\n\r\n    //capacity\r\n    if (capacity > 1)\r\n      tempRooms = tempRooms.filter(room => room.capacity >= capacity);\r\n\r\n    // price\r\n    tempRooms = tempRooms.filter(room => room.price <= price);\r\n\r\n    //size\r\n    tempRooms = tempRooms.filter(\r\n      room => room.size >= minSize && room.size <= maxSize\r\n    );\r\n\r\n    //breakfast\r\n    if (breakfast)\r\n      tempRooms = tempRooms.filter(room => room.breakfast === true);\r\n\r\n    //pets\r\n    if (pets) tempRooms = tempRooms.filter(room => room.pets === true);\r\n\r\n    //update the state\r\n    this.setState({ sortedRooms: tempRooms });\r\n  };\r\n  render() {\r\n    return (\r\n      <RoomContext.Provider\r\n        value={{\r\n          ...this.state,\r\n          getRoom: this.getRoom,\r\n          handleChange: this.handleChange\r\n        }}\r\n      >\r\n        {this.props.children}\r\n      </RoomContext.Provider>\r\n    );\r\n  }\r\n}\r\n\r\nexport default RoomProvider;\r\n","import React from \"react\";\r\nimport \"./withSpinner.styles.css\";\r\n\r\nconst withSpinner = () => {\r\n  return (\r\n    <div className=\"spinner-container\">\r\n      <div className=\"lds-grid\">\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default withSpinner;\r\n","module.exports = __webpack_public_path__ + \"static/media/logo.c7c76c7a.svg\";"],"sourceRoot":""}